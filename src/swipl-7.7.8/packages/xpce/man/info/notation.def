#chapter Notation

This manual uses a number of symbols that are special to the XPCE
documentation.  Below is a summary of these constructs.


BEHAVIOUR REFERENCES IN RUNNING TEXT

In running text, the following notation to reference behaviour,
functions, etc. is used:

	`class ->selector'	Send method `selector' on class `Class'
	`class <-selector'	Get method `selector' on class `Class'
	`class <->selector'	Both the send- and the get method.
	`class -selector'	Non-accesible variable on class `Class'
	->selector		Send method on `this' class
	<-selector		Get method
	<->selector		Both send-, and get method
	-selector		Non-accesible variable
	name/arity		Prolog predicate `name' with `arity'
	Pce.Class.selector	Named X-resource (For your ~/.Xdefaults)
	

BEHAVIOUR DEFINITION HEADERS

A behaviour definition header describes a behaviour (variable, send- or
get method) for the currently described class (mentioned at the top of 
the page).  Each definition consists of a *bold-printed* name of the
behaviour at the left margin and a type indication at the right margin.
The description in between depends on the type of behaviour.


** Variables

After the name follows the type (see below), the access between brackets
(-: none, <-: get, ->: send or <->: send and get).  If there is a
X-resource defined for the variable (which implies the user may change
the default in his/her ~/.Xdefaults file) this is notated as:

	[Pce.Class.selector: default]

Where `default' describes the default in the format it should appear in
your ~/.Xdefaults file.

The exact syntax and semantics of a type declaraction is specified with
class type.  Below is a short summary:

	Type ...	Zero or more of these arguments
	Type1|Type2	Disjunction (either of the types)
	Type*		The type or the constant @nil
	[Type]		The type or @default (optional argument)
	{Name1,Name2}	One of these names
	int		An integer (the only non-object datum)
	3..5		An integer 3 <= value <= 5
	3.2..5.6	A real (float) in this range


** Send Method

After the name follows a list of arguments.  The arguments are separated
by commas.  Each argument is either of the form `argument-type' or of
the form `argument-name=argument-type'.  Arguments of the first type
may only be specified by their position.  Arguments of the second type
may also be specified as (for example):

	send(Area, set, y := 6)

** Get Method

#end chapter

#texinfo
After the list follows a list of argument as with the send method,
followed by `@result{Return Type}'.  
#end texinfo
