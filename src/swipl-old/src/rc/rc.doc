\documentclass[11pt]{article}
\newcommand{\runningtitle}{Resource handling in XPCE/Prolog}
\usepackage{pl}
\usepackage{html}
\makeindex

\title{Resource handling in XPCE/Prolog}
\author{Jan Wielemaker\\
	SWI, University of Amsterdam\\
	Roetersstraat 15\\
	1018 WB~~Amsterdam\\
	E-mail: \email{jan@swi.psy.uva.nl}}

\begin{document}

\maketitle

\begin{abstract}
This document is a proposal for the definition of program resources for
XPCE/Prolog applications. A resource is a (binary) object that can be
handled as a file. The aim of the XPCE/Prolog resource mechanism is to
arrive at single-file executables that are easil configured and
maintained.
\end{abstract}

\pagebreak
\tableofcontents

\section{Outline}

A \jargon{resource} is defined as a named octed-stream of a specified
length. This definition is very general. This general definition is
necessary because the XPCE/Prolog resource mechanism is required to be
platform independent and has to deal with a large variation of data
objects.

In addition, defining a resource at this basic level allows provides
an easy way of making the data available to the resource engine and
from the engine to the application using \emph{files}.

The characteristics of resources are specified using Prolog facts.  The
resource data is located in files.  The predicate qsave_program/2 will
collect the resources and integrate them into the saved state.

Resources can be accessed as ordinary (read-only) files using the file
specification \term{resource}{Name}.  In addition, there is a C-library
to define, manipulate and access resources.

\section{Resource Specification}

As a resource is defined as a named octed-stream, the most natural
solution is to store them on files and allow the normal file operations
to work on resources. This provides for easy and fast development
without the need for a seperate resource compiler before an application
can be tested.  The central resource declaration is below.

In addition to its name, a resource has a \emph{Class}.	 The resource
mechanism itself doesn't impose any restrictions on the name, nor the
class-name. The \arg{Class} \const{swi} is reserved for resources
that belong SWI-Prolog, the \arg{Class} \const{xpce} is reserved for
XPCE specific resources.

\begin{description}
\predicate{user:resource}{2}{+Name, +Class, -FileSpec}
    Resource named \arg{Name} can be found on file \arg{FileSpec}.
    \arg{FileSpec} is a file specification using the Prolog
    file_search_path/2 expansion.  See also absolute_file_name/3.
\predicate{open_resource}{2}{+Name, ?Class, -Fd}
    Open a reource object and connect it to a Prolog stream.  The
    returned stream should be closed using the normal close/1 predicate.

    If there is a resource archive attached (see attach_resource_archive/2),
    this will search for the resource in the archive (and only in the
    archive). Otherwise it will search the file using the resource/2
    declarations and open the file. If the resource cannot be located,
    an existence error will be raised.
\end{description}

In addition, the following predicates are available for managing the
resource files:

\begin{description}
\predicate{attach_resource_archive}{1}{+File}
    After a resource archive has been attached, open_resource/3 will
    access the archive, rather than accessing the underlying files.

\predicate{archive_resources}{1}{+File}
    Archive all resources into the named file.
\end{description}


\section{C-library}

The C-library defines the low-level access to the resource database. It
is used to define stand-alone tools for accessing and modifying resource
databases, similar to archive programs such as \program{ar} or
\program{zip}, as well as to provide the bottom layer for integrating
the resources into XPCE/Prolog.

\subsection{Maintenance functions}

\begin{description}
    \cfunction{RcArchive}{rc_open_archive}{const char *file}
Open a resource database with the given name.  If the resource does not
exist, create a new one.
    \cfunction{int}{rc_close_archive}{RcArchive}
Closes the resource, updating the file if it was changed. Returns
\const{TRUE} on success or \const{FALSE} if an error occurred.
    \cfunction{int}{rc_append_file}{const char *name,
				    const char *rcclass, const char *enc,
				    const char *file}
Adds a file to the resource. \arg{Name} denotes the name of the new
resource element, \arg{file} defines the content of the resource. If
\arg{name} is \const{NULL}, the base-name of \arg{file} is used.
Return \const{TRUE} on success, \const{FALSE} if some error occurred.
    \cfunction{int}{rc_delete}{const char *name, const char *class}
Delete the given member from the resource archive.
\end{description}

\subsection{Access functions}

\begin{description}
    \cfunction{RcObject}{rc_open}{RcArchive handle,
				  const char *name, const char *class}
Open an object in the archive, returning a handle to it.  Returns
\const{NULL} if the resource cannot be found. If \arg{class} is
\const{NULL}, the first resource with the given name is returned.
    \cfunction{void}{rc_close}{RcObject}
Invalidate the handle returned by \cfuncref{rc_open}{}, releasing
possibly associated resources.
    \cfunction{void}{rc_stat}{RcStatBuf status}
Returns status information on the archive member (size, modification
date).
    \cfunction{rc_offset}{rc_seek}{RcObject rc, rc_offset to, int whence}
Seek to a certain position, returning the new offset.
    \cfunction{int}{rc_read}{RcObject rc, void *buf, int bytes}
Read \arg{bytes} from the resource object.
    \cfunction{void *}{rc_data}{RcObject rc, int *size}
Get a pointer to the entire contents of the object.  If the operating
system defines memory mapping, this will be a pointer to the mapped
object.  Otherwise it will be a pointer to a malloc()-ed buffer into
which the entire content of the resource has been copied.  This buffer
will be released by \cfuncref{rc_close}{}. The size of the resource in
bytes is stored into \arg{size}.
\end{description}

\section{Resources in memory}



\section{File Format}

The file format is choosen to be HTML-like. The members of the archive
are stored in sequence with separating headers.

\printindex

\end{document}
